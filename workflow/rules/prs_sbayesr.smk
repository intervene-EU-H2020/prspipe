
rule download_genetic_map:
    # 4.6 Prepare score and scale files for polygenic scoring using SBayesR
    # somehow these downloads take forever...
    output:
        expand("{genetic_map}/CEU/chr{chr}.OMNI.interpolated_genetic_map", genetic_map=config['genetic_map'], chr=range(1,23))
    log:
        "logs/download_genetic_map.log"
    shell:
        "("
        "cd {config[genetic_map]}/CEU; "
        "for chr in $(seq 1 22); do "
        "wget https://github.com/joepickrell/1000-genomes-genetic-maps/raw/master/interpolated_OMNI/chr${{chr}}.OMNI.interpolated_genetic_map.gz; "
        "done; "
        "gunzip *.gz "
        ") &> {log} "
        

rule generate_ldm_chunks_1:
    # generate sbayesr LD matrix in chunks, step 1
    # filter SNPs to those with MAF > 0.001
    # generate chunk files
    input:
        rules.run_allele_freq_superpop.output
    output:
        # A rule with dynamic output may not define any non-dynamic output files.
        # however, this temporary file is produced as well:
        # snp=expand("{geno1kdir}/LD_matrix/{{popul}}/chr{{chr}}/SNP.txt", geno1kdir=config['Geno_1KG_dir']),
        chunk=dynamic(expand("{geno1kdir}/LD_matrix/{{popul}}/chr{{chr}}/SNP_{{chunk}}.txt", geno1kdir=config['Geno_1KG_dir']))
    shell:
        "Rscript workflow/scripts/R/prs_sbayesr/generate_ld_matrix_chunks.R {wildcards[popul]} {config[sbayesr_ldm_chunksize]} {wildcards[chr]}"


rule generate_ldm_chunks_1_all:
    # example of how to run the dynamic rule above
    input:
        dynamic(expand(rules.generate_ldm_chunks_1.output, popul='EUR', chr=range(1,23), allow_missing=True))


rule generate_ldm_chunks_2:
    # generate sbayesr LD matrix in chunks, step 2
    input:
        chunkfile='{}/LD_matrix/{{popul}}/chr{{chr}}/SNP_{{chunk}}.txt'.format(config['Geno_1KG_dir']),
        genetic_map=lambda wc: rules.download_genetic_map.output[int(wc['chr'])-1],
        extract_hm3=rules.extract_hm3.output,
        keep=rules.create_ancestry.output
    output:
        bin=temp('{}/LD_matrix/{{popul}}/chr{{chr}}/1KGPhase3.w_hm3.{{chunk}}.ldm.shrunk.bin'.format(config['Geno_1KG_dir'])),
        info=temp('{}/LD_matrix/{{popul}}/chr{{chr}}/1KGPhase3.w_hm3.{{chunk}}.ldm.shrunk.info'.format(config['Geno_1KG_dir']))
    log:
        'logs/generate_ldm_chunks_2/{popul}_{chr}_{chunk}.log'
    shell:
        "("
        "while read start end; do "
        "{config[gctb]} "
        "--bfile {config[Geno_1KG_dir]}/1KGPhase3.w_hm3.chr{wildcards[chr]} "
        "--keep {config[Geno_1KG_dir]}/keep_files/{wildcards[popul]}_samples.keep "
        "--make-shrunk-ldm "
        "--extract {config[Geno_1KG_dir]}/LD_matrix/{wildcards[popul]}/chr{wildcards[chr]}/SNP.txt "
        "--gen-map {input[genetic_map]} "
        "--snp ${{start}}-${{end}} "
        "--out {config[Geno_1KG_dir]}/LD_matrix/{wildcards[popul]}/chr{wildcards[chr]}/1KGPhase3.w_hm3; "
        "done < {input[chunkfile]} "
        ") &> {log} "


rule merge_ldm_chunks:
    # merge the chunks generated by the rule above
    input:
        chunks=dynamic(rules.generate_ldm_chunks_2.output.bin)
    output:
        '{}/LD_matrix/{{popul}}/1KGPhase3.w_hm3.{{popul}}.chr{{chr}}.ldm.shrunk.bin'.format(config['Geno_1KG_dir'])
    log:
        "logs/merge_ldm_chunks/{popul}_{chr}.log"
    shell:
        "("
        "Rscript workflow/scripts/R/prs_sbayesr/merge_ld_matrix_chunks.R {wildcards[popul]} {wildcards[chr]} {input[chunks]} "
        ") &> {log} "
        

rule all_sbayesr_ldm:
    # run the rule above for all chromosomes and EUR reference population
    input:
        expand(rules.merge_ldm_chunks.output, popul=['EUR'], chr=range(1,23))
        


