# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

import pandas as pd
from snakemake.utils import validate
from collections import defaultdict

configfile: "config/config.yaml"
validate(config, schema="schemas/config.schema.yaml")

# the sample sheet for the different GWAS summary statistics
studies = pd.read_csv(config["studies"], dtype={'study_id':str}, sep='\t').set_index(["study_id"], drop=False)
validate(studies, schema="schemas/studies.schema.yaml")

# the sample sheet for the different target genotypes
target_list = pd.read_csv(config["target_list"], dtype=str, sep='\t').set_index(["name"], drop=False)
validate(target_list, schema="schemas/target_list.schema.yaml")



# disease prevalences, if present (needed for evaluation)

def nan():
    return 'NA'
    
prevalence = defaultdict(nan)
if 'prevalence' in config:
    with open(config['prevalence'], 'r') as infile:
        for line in infile:
            d, n = line.rstrip().split('\t')
            try:
                prevalence[d] = float(n)
                assert prevalence[d] > 0. and prevalence[d] <= 1., 'Error: invalid prevalence for phenotype "{}", found: "{}"'.format(d, prevalence[n])
            except ValueError:
                assert n == 'NA', 'Error: invalid prevalence for phenotype "{}", found: "{}". If prevalence is unknown, use "NA" or remove the phenotype from the prevalence list.'.format(d, prevalence[n])

report: "report/workflow.rst"

# Allow users to fix the underlying OS via singularity (default singularity container to use)
singularity: 'docker://rmonti/prspipe:0.0.1'


rule test_R:
     output:
        touch('R.ok')
     script:
        "scripts/R/source_config.R"

wildcard_constraints:
    chr="[0-9]+",
    pop="[A-Z]+",
    popul="[A-Z]+",
    superpop="[A-Z]+"

# setup and 1000G harmonization
include: "rules/1kg_hm3_processing.smk"
include: "rules/setup.smk"
include: "rules/base_sumstats.smk"


# running prs methods and predicting on 1000G
include: "rules/ld_matrix.smk"
include: "rules/prs_ptclump_plink2.smk"
include: "rules/prs_lassosum_plink2.smk"
include: "rules/prs_dbslmm_plink2.smk"
include: "rules/prs_sbayesr_plink2.smk"
include: "rules/prs_prscs_plink2.smk"
include: "rules/prs_ldpred2_plink2.smk"
include: "rules/prs_megaprs_plink2.smk"

rule all_setup:
    # this triggers pre-processing of 1000G
    input:
        'resources/1kg/Score_files_for_ancestry/EUR/1KGPhase3.w_hm3.EUR.eigenvec.var',
        'resources/1kg/Score_files_for_ancestry/AllAncestry/1KGPhase3.w_hm3.AllAncestry.eigenvec.var',
        rules.run_allele_freq_all.output,
        rules.download_liftover.output,
        rules.extract_hm3_gw.output
        

# external biobanks
include: "rules/genotype_harmonization.smk"
include: "rules/external_biobanks.smk"


rule prs_1kg_precompld:
    # run PRS methods and predict for 1000G using pre-computed reference panels
    # the predictions are used as baselines for the different ancestries
    input:
        expand('prs/{method}/{study}/ok', method=config['prs_methods'], study=studies.study_id)

# default rule
rule all:
    input:
        rules.validate_setup_ext.input
